CREATE DATABASE IF NOT EXISTS Grocery_store;
USE Grocery_store;

CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);


CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id) ON UPDATE CASCADE ON
    DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id) ON UPDATE CASCADE ON DELETE CASCADE
);



CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id) ON UPDATE CASCADE ON DELETE CASCADE
);

## 1 Find the total number of orders placed by each customer.
SELECT cust_id, COUNT(ord_id) AS total_orders
FROM orders
GROUP BY cust_id;
## 2  Determine the total revenue generated by each product.
SELECT prod_id, SUM(quantity * each_price) AS total_revenue
FROM order_details
GROUP BY prod_id;

## 3 Find the top 5 employees who have processed the most orders.
select emp_id,count(ord_id) AS processed_orders
from orders
group by emp_id
ORDER BY processed_orders DESC
limit 5;
## 4  Identify the most popular product category based on the number of orders.
SELECT cat_id, COUNT(ord_id) AS total_orders
FROM order_details
JOIN products ON order_details.prod_id = products.prod_id
GROUP BY cat_id
ORDER BY total_orders DESC;
## 5 Calculate the average order value for each customer.
select cust_id,cust_name,avg(total_price) as average_order_value
from customers
join orders
using(cust_id)
join order_details
using(ord_id)
group by cust_id,cust_name;
## 6 List all suppliers who provide more than 3 different products.
SELECT sup_id, COUNT(DISTINCT prod_id) AS product_count
FROM products
GROUP BY sup_id
HAVING COUNT(DISTINCT prod_id) > 3;

## 7 Find the total quantity of each product sold.
SELECT prod_id, SUM(quantity) AS total_quantity_sold
FROM order_details
GROUP BY prod_id;

## 8 Determine the product with the highest sales revenue.
select prod_id, prod_name, sum(quantity*each_price) as total_revenue
from products
join order_details 
using(prod_id)
group by prod_id, prod_name
order by total_revenue desc
limit 1;
## 9. Find the number of orders placed in each month.
SELECT DATE_FORMAT(order_date, '%Y-%m') AS order_month,
COUNT(*) AS number_of_orders
FROM orders
GROUP BY  order_month
ORDER BY order_month;
## 10 Identify customers who have never placed an order.
SELECT c.cust_id, c.cust_name
FROM customers c
LEFT JOIN orders AS o ON c.cust_id = o.cust_id
WHERE o.ord_id IS NULL;
